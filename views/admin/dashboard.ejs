<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
    }
    .modal.hidden {
      display: none;
    }
  </style>
</head>
<body class="bg-gray-100">

  <!-- Modal -->
  <div id="detailsModal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded-lg shadow-md w-1/2">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold">Internship Details</h2>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700">&times;</button>
      </div>
      <div id="modalContent" class="space-y-4">
        <!-- Internship details will be dynamically loaded here -->
      </div>
      <div class="flex justify-end mt-4">
        <button onclick="closeModal()" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700">Close</button>
      </div>
    </div>
  </div>
  <header class="bg-blue-600 text-white py-4">
    <div class="container mx-auto flex justify-between items-center px-4">
      <h1 class="text-2xl font-bold">Hello <%= user.username %></h1>
      <a href="/auth/adminlogout" style="text-decoration: none;" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700">Logout</a>
    </div>
  </header>
    <!-- Success Notification -->
    
  <main class="container mx-auto px-4 py-6">
    <section class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-xl font-semibold mb-4">Post New Internship</h2>
      <form id="postInternshipForm" onsubmit="submitInternship(event)" method="post" enctype="application/x-www-form-urlencoded">
        <div class="mb-4">
          <label for="title" class="block text-gray-700">Internship Title</label>
          <input type="text" id="title" name="title" placeholder="Internship Title" class="w-full p-2 border rounded-md" required>
        </div>
        <div class="mb-4">
          <label for="description" class="block text-gray-700">Description</label>
          <textarea id="description" name="description" placeholder="Internship Description" class="w-full p-2 border rounded-md" required></textarea>
        </div>
        <div class="mb-4">
          <label for="company" class="block text-gray-700">Company Name</label>
          <input type="text" id="company" name="company" placeholder="Company Name" class="w-full p-2 border rounded-md" required>
        </div>
        <div class="mb-4">
          <label for="location" class="block text-gray-700">Location</label>
          <input type="text" id="location" name="location" placeholder="Location (e.g., Remote, City Name)" class="w-full p-2 border rounded-md">
        </div>
        <div class="mb-4">
          <label for="stipend" class="block text-gray-700">Stipend</label>
          <input type="text" id="stipend" name="stipend" placeholder="Stipend (e.g., $500/month)" class="w-full p-2 border rounded-md">
        </div>
        <div class="mb-4">
          <label for="eligibility" class="block text-gray-700">Eligibility Criteria</label>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label for="minCGPA" class="block text-gray-700">Minimum CGPA</label>
              <input type="number" step="0.01" id="minCGPA" name="eligibility[minCGPA]" placeholder="e.g., 7.5" class="w-full p-2 border rounded-md">
            </div>
            <div>
              <label for="minXthPercentage" class="block text-gray-700">Minimum 10th Percentage</label>
              <input type="number" step="0.01" id="minXthPercentage" name="eligibility[minXthPercentage]" placeholder="e.g., 75" class="w-full p-2 border rounded-md">
            </div>
            <div>
              <label for="minXIIthPercentage" class="block text-gray-700">Minimum 12th Percentage</label>
              <input type="number" step="0.01" id="minXIIthPercentage" name="eligibility[minXIIthPercentage]" placeholder="e.g., 80" class="w-full p-2 border rounded-md">
            </div>
          </div>
        </div>
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">Post Internship</button>
      </form>
    </section>

    <!-- <section class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-4">Student Applications</h2>
      <div class="space-y-4">
        <div class="border p-4 rounded-lg">
          <h3 class="text-lg font-semibold">Student Name</h3>
          <p class="text-gray-700">Resume: <a href="/resume.pdf" class="text-blue-600 hover:underline">Download</a></p>
          <p class="text-gray-700">Status: <span class="font-semibold text-yellow-600">In Process</span></p>
          <button class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 mt-2">Select</button>
          <button class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 mt-2">Reject</button>
        </div>
      </div>
    </section> -->
    <section class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-4">Your Posted Internships</h2>
      <div id="internship-list" class="space-y-4">
        <!-- Internships will be dynamically loaded here -->
      </div>
    </section>
  </main>
  <script>
    // Function to fetch internships posted by the admin
    async function fetchAdminInternships() {
      try {
        const response = await fetch(`/admin/internships`);
        if (!response.ok) {
          throw new Error('Failed to fetch internships');
        }
        const {internships} = await response.json();
  
        // Get the internship list container
        const internshipList = document.getElementById('internship-list');
        internshipList.innerHTML = ''; // Clear any existing content
  
        // Populate the list with fetched internships
        internships.forEach((internship) => {
          const internshipCard = document.createElement('div');
          internshipCard.className = 'border p-4 rounded-lg';
          internshipCard.innerHTML = `
            <h3 class="text-lg font-semibold">${internship.title}</h3>
            <p class="text-gray-700">Company: ${internship.company}</p>
            <button onclick="showInternshipDetails('${internship._id}')" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 mt-2">Show Details</button>
          `;
          internshipList.appendChild(internshipCard);
        });
      } catch (error) {
        console.error('Error fetching internships:', error);
        const internshipList = document.getElementById('internship-list');
        internshipList.innerHTML = '<p class="text-red-500">Failed to load internships. Please try again later.</p>';
      }
    }
  
    async function submitInternship(event) {
        event.preventDefault(); // Prevent the default form submission

        const form = document.getElementById('postInternshipForm');

        // Gather form data manually
        const internshipData = {
            title: form.title.value,
            description: form.description.value,
            company: form.company.value,
            location: form.location.value,
            stipend: form.stipend.value,
            eligibility: {
                minCGPA: form.minCGPA.value,
                minXthPercentage: form.minXthPercentage.value,
                minXIIthPercentage: form.minXIIthPercentage.value
            }
        };

        

        try {
            const response = await fetch('/admin/internship', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json' // Set the content type to JSON
                },
                body: JSON.stringify(internshipData) // Convert the data to a JSON string
            });

            const result = await response.json();

            if (response.ok) {
                alert(result.message); // Show success message
                form.reset(); // Reset the form
                fetchAdminInternships(); // Refresh the list of internships
            } else {
                alert(result.message); // Show error message
            }
        } catch (error) {
            console.error('Error posting internship:', error);
            alert('An error occurred while posting the internship. Please try again.');
        }
    }
    // Function to show details of a specific internship
    async function showInternshipDetails(internshipId) {
      try {
        const response = await fetch(`/admin/internship/${internshipId}`);
        if (!response.ok) {
          throw new Error('Failed to fetch internship details');
        }
        const applications = await response.json();
  
        // Display applications in a modal or a new section
        const modalContent = applications.map(app => `
          <div class="border p-4 rounded-lg">
            <h3 class="text-lg font-semibold">${app.Name}</h3>
            <p class="text-gray-700">Resume: <a href="${app["Resume Link"]}" class="text-blue-600 hover:underline" target="_blank">View</a></p>
          </div>
        `).join('');
        document.getElementById('modalContent').innerHTML = modalContent;

        // Show the modal
        const modal = document.getElementById('detailsModal');
        modal.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching internship details:', error);
        alert('Failed to load internship details. Please try again later.');
      }
    }
    // Function to close the modal
    function closeModal() {
      const modal = document.getElementById('detailsModal');
      modal.classList.add('hidden');
    }
  
    // Call the function when the page loads
    document.addEventListener('DOMContentLoaded', fetchAdminInternships);
    // Hide the success popup after 3 seconds
    document.addEventListener('DOMContentLoaded', () => {
      const successPopup = document.getElementById('success-popup');
      if (successPopup) {
        setTimeout(() => {
          successPopup.style.display = 'none';
        }, 3000);
      }
    });
  </script>
</body>
</html>